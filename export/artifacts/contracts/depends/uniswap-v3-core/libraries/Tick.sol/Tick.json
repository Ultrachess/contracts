{
  "contractName": "Tick",
  "sourceName": "contracts/depends/uniswap-v3-core/libraries/Tick.sol",
  "abi": [],
  "bytecode": "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122082a1d539da755a723e8f3465ec86bfb1b22040e5a3c0face1e571d59713d922664736f6c63430007060033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122082a1d539da755a723e8f3465ec86bfb1b22040e5a3c0face1e571d59713d922664736f6c63430007060033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "Tick",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Contains functions for managing tick processes and relevant calculations",
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "17200",
        "executionCost": "97",
        "totalCost": "17297"
      },
      "internal": {
        "clear(mapping(int24 => struct Tick.Info storage ref),int24)": "infinite",
        "cross(mapping(int24 => struct Tick.Info storage ref),int24,uint256,uint256,uint160,int56,uint32)": "infinite",
        "getFeeGrowthInside(mapping(int24 => struct Tick.Info storage ref),int24,int24,int24,uint256,uint256)": "infinite",
        "tickSpacingToMaxLiquidityPerTick(int24)": "infinite",
        "update(mapping(int24 => struct Tick.Info storage ref),int24,int24,int128,uint256,uint256,uint160,int56,uint32,bool,uint128)": "infinite"
      }
    },
    "methodIdentifiers": {}
  }
}