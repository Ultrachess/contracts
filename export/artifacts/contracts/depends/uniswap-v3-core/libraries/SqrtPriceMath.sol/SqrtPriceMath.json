{
  "contractName": "SqrtPriceMath",
  "sourceName": "contracts/depends/uniswap-v3-core/libraries/SqrtPriceMath.sol",
  "abi": [],
  "bytecode": "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208607bcb5baf1c638877c79a35576ee5f2494a659aa38452cb74f4a90f73ac1d964736f6c63430007060033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208607bcb5baf1c638877c79a35576ee5f2494a659aa38452cb74f4a90f73ac1d964736f6c63430007060033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "Functions based on Q64.96 sqrt price and liquidity",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas",
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "17200",
        "executionCost": "97",
        "totalCost": "17297"
      },
      "internal": {
        "getAmount0Delta(uint160,uint160,int128)": "infinite",
        "getAmount0Delta(uint160,uint160,uint128,bool)": "infinite",
        "getAmount1Delta(uint160,uint160,int128)": "infinite",
        "getAmount1Delta(uint160,uint160,uint128,bool)": "infinite",
        "getNextSqrtPriceFromAmount0RoundingUp(uint160,uint128,uint256,bool)": "infinite",
        "getNextSqrtPriceFromAmount1RoundingDown(uint160,uint128,uint256,bool)": "infinite",
        "getNextSqrtPriceFromInput(uint160,uint128,uint256,bool)": "infinite",
        "getNextSqrtPriceFromOutput(uint160,uint128,uint256,bool)": "infinite"
      }
    },
    "methodIdentifiers": {}
  }
}