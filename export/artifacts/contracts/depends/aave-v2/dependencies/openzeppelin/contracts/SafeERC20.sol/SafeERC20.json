{
  "contractName": "SafeERC20",
  "sourceName": "contracts/depends/aave-v2/dependencies/openzeppelin/contracts/SafeERC20.sol",
  "abi": [],
  "bytecode": "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207a5e61420a5c6cc0f446e5723b1cc783053bfb2bb2dcb206e74391e84b61015264736f6c634300060c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207a5e61420a5c6cc0f446e5723b1cc783053bfb2bb2dcb206e74391e84b61015264736f6c634300060c0033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
    "kind": "dev",
    "methods": {},
    "title": "SafeERC20",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "17200",
        "executionCost": "97",
        "totalCost": "17297"
      },
      "internal": {
        "callOptionalReturn(contract IERC20,bytes memory)": "infinite",
        "safeApprove(contract IERC20,address,uint256)": "infinite",
        "safeTransfer(contract IERC20,address,uint256)": "infinite",
        "safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
      }
    },
    "methodIdentifiers": {}
  }
}