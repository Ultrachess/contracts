{
  "contractName": "Counters",
  "sourceName": "contracts/depends/openzeppelin-v2/drafts/Counters.sol",
  "abi": [],
  "bytecode": "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820e9998093602bd6ee44137f65774bc3c12a5164a314ff9c9637bb08c3c7e07fea64736f6c63430005110032",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820e9998093602bd6ee44137f65774bc3c12a5164a314ff9c9637bb08c3c7e07fea64736f6c63430005110032",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "author": "Matt Condon (@shrugs)",
    "details": "Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. * Include with `using Counters for Counters.Counter;` Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath} overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never directly accessed.",
    "methods": {},
    "title": "Counters"
  },
  "userdoc": {
    "methods": {}
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "17000",
        "executionCost": "94",
        "totalCost": "17094"
      },
      "internal": {
        "current(struct Counters.Counter storage pointer)": "infinite",
        "decrement(struct Counters.Counter storage pointer)": "infinite",
        "increment(struct Counters.Counter storage pointer)": "infinite"
      }
    },
    "methodIdentifiers": {}
  }
}