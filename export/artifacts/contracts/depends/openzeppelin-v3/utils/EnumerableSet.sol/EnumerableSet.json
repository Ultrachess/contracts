{
  "contractName": "EnumerableSet",
  "sourceName": "contracts/depends/openzeppelin-v3/utils/EnumerableSet.sol",
  "abi": [],
  "bytecode": "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ca427a055062b8f2af465e1ffb4e09801c55a545bc427c08ab3ee4d4e5cf983764736f6c63430007060033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ca427a055062b8f2af465e1ffb4e09801c55a545bc427c08ab3ee4d4e5cf983764736f6c63430007060033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "details": "Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported.",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "17200",
        "executionCost": "97",
        "totalCost": "17297"
      },
      "internal": {
        "_add(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
        "_at(struct EnumerableSet.Set storage pointer,uint256)": "infinite",
        "_contains(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
        "_length(struct EnumerableSet.Set storage pointer)": "infinite",
        "_remove(struct EnumerableSet.Set storage pointer,bytes32)": "infinite",
        "add(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
        "add(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
        "add(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
        "at(struct EnumerableSet.AddressSet storage pointer,uint256)": "infinite",
        "at(struct EnumerableSet.Bytes32Set storage pointer,uint256)": "infinite",
        "at(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
        "contains(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
        "contains(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
        "contains(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite",
        "length(struct EnumerableSet.AddressSet storage pointer)": "infinite",
        "length(struct EnumerableSet.Bytes32Set storage pointer)": "infinite",
        "length(struct EnumerableSet.UintSet storage pointer)": "infinite",
        "remove(struct EnumerableSet.AddressSet storage pointer,address)": "infinite",
        "remove(struct EnumerableSet.Bytes32Set storage pointer,bytes32)": "infinite",
        "remove(struct EnumerableSet.UintSet storage pointer,uint256)": "infinite"
      }
    },
    "methodIdentifiers": {}
  }
}