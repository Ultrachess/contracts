{
  "contractName": "Counters",
  "sourceName": "contracts/depends/openzeppelin-v3/utils/Counters.sol",
  "abi": [],
  "bytecode": "0x60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fde9c764b4b5bbc4369c1d814c3145e8241d816eb1642833dd3b4797213efb6564736f6c63430007060033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fde9c764b4b5bbc4369c1d814c3145e8241d816eb1642833dd3b4797213efb6564736f6c63430007060033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "author": "Matt Condon (@shrugs)",
    "details": "Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;` Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath} overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never directly accessed.",
    "kind": "dev",
    "methods": {},
    "title": "Counters",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "17200",
        "executionCost": "97",
        "totalCost": "17297"
      },
      "internal": {
        "current(struct Counters.Counter storage pointer)": "infinite",
        "decrement(struct Counters.Counter storage pointer)": "infinite",
        "increment(struct Counters.Counter storage pointer)": "infinite"
      }
    },
    "methodIdentifiers": {}
  }
}