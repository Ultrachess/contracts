{
  "contractName": "SafeMath",
  "sourceName": "@openzeppelin/contracts/utils/math/SafeMath.sol",
  "abi": [],
  "bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220784408627ec5c012d10e4e16407eb120865b6e52f6f9539dcb10e631b25ae00a64736f6c63430008120033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220784408627ec5c012d10e4e16407eb120865b6e52f6f9539dcb10e631b25ae00a64736f6c63430008120033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "17200",
        "executionCost": "103",
        "totalCost": "17303"
      },
      "internal": {
        "add(uint256,uint256)": "infinite",
        "div(uint256,uint256)": "infinite",
        "div(uint256,uint256,string memory)": "infinite",
        "mod(uint256,uint256)": "infinite",
        "mod(uint256,uint256,string memory)": "infinite",
        "mul(uint256,uint256)": "infinite",
        "sub(uint256,uint256)": "infinite",
        "sub(uint256,uint256,string memory)": "infinite",
        "tryAdd(uint256,uint256)": "infinite",
        "tryDiv(uint256,uint256)": "infinite",
        "tryMod(uint256,uint256)": "infinite",
        "tryMul(uint256,uint256)": "infinite",
        "trySub(uint256,uint256)": "infinite"
      }
    },
    "methodIdentifiers": {}
  }
}